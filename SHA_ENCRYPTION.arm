//Preprocess the Data
//X0 = X0 << 12    || slli
//X0 = X0 + X1     || ADD
//X1 = X31 + 1     || ADDI
//X1 = X31 << (128-24) || slli
//X0 = X0 + X1     || ADD
//Zero out X1-X14  || X? = X31 + X31
//X15 = length of input message
011000010110_11111_000_00000_0010011 //X0 = X31 + 0x616 || ADDI
001001100011_11111_000_00001_0010011 //X1 = X31 + 0x263 || ADDI
000000110100_00000_100_00000_0010011 //X0 = X0 << 52    || SLLI
000000101000_00001_100_00001_0010011 //X1 = X1 << 40    || SLLI
0000000_00000_00001_000_00000_0110011 //X0 = X0 + X1    || ADD
000000000001_11111_000_00001_0010011 //X1 = X31 + 0x1   || ADDI
000000100111_00001_100_00001_0010011 //X1 = X1 << 39    || SLLI
0000000_00000_00001_000_00000_0110011 //X0 = X0 + X1    || ADD

//Perform msgRounds
//WORD_MEM = X0 || MSG_ROUND

//XX00010_11111_00000_000_11111_1101111 //wordMem[round] = X0[63:0]
000000001110_11111_000_00010_0010011    //ADDI X2 X31 #14
0000000_11111_11111_000_00001_0110011   //ADD X1 X31 X31 || X1=i=0
//Loop code starts here
00_00001_11111_00000_000_11111_1101111  //MSG_ROUND X31 X0 X31 X1
000000000001_00001_000_00001_0010011    //ADD X1 X1 #1 || X1 += 1
00_00001_11111_11111_000_11111_1101111  //MSG_ROUND X31 X31 X31 X1
000000000001_00001_000_00001_0010011    //ADDI X1 X1 #1 || X1 += 1
1111111_00010_00001_011_1111_1_1100011  //B.LE X1 X2 || X1 < X2

000000011000_11111_000_00011_0010011    //ADDI X3 X31 #0x18
00_00001_11111_00011_000_11111_1101111  //MSG_ROUND X31 X3 X31 X1
000000000001_00001_000_00001_0010011    //ADDI X1 X1 #1 || X1 += 1

//Rounds 16-79
000001001111_11111_000_00010_0010011    //ADDI X2 X31 #79
00_00001_11111_11111_000_11111_1101111  //MSG_ROUND X31 X31 X31 X1
000000000001_00001_000_00001_0010011    //ADDI X1 X1 #1
1111111_00010_00001_011_1111_1_1100011  //B.LE X1 X2 || X1 < X2

//Loop 80 times through T1, T2 then recombine

//Set initial hashes using registers X0-X3
0000000_11111_11111_000_00100_0110011   //ADD X4 X31 X31
00_00100_11111_11111_100_00000_1101111  //SETHASH X0 X4
000000000001_00100_000_00100_0010011    //ADDI X4 X4 #1
00_00100_11111_11111_100_00001_1101111  //SETHASH X1 X4
000000000001_00100_000_00100_0010011    //ADDI X4 X4 #1
00_00100_11111_11111_100_00010_1101111  //SETHASH X2 X4
000000000001_00100_000_00100_0010011    //ADDI X4 X4 #1
00_00100_11111_11111_100_00011_1101111  //SETHASH X3 X4

//Set loop variables X6 (i) and X7 (iterative limit)
//A&B = X0
//C&D = X1
//E&F = X2
//G&H = X3
0000000_11111_11111_000_00111_0110011   //ADD X7 X31 X31
000001001111_11111_000_01000_0010011    //ADDI X8 X31 #79
00_00111_00011_00010_001_00100_1101111  //T1 X4 X2 X3 X7
00_00111_00001_00000_010_00101_1101111  //T2 X5 X0 X1 X7
00_11111_00011_00010_011_00011_1101111  //ADDHASH X3 X2 X3 X31
01_00100_00010_00001_011_00010_1101111  //ADDHASH X2 X2 X1 X4
00_11111_00001_00000_011_00001_1101111  //ADDHASH X1 X0 X1 X31
10_00101_00100_00000_011_00000_1101111  //ADDHASH X0 X0 X4 X5
000000000001_00111_000_00111_0010011    //ADDI X7 X7 #1
0000000_11111_11111_000_11111_0110011   //ADD X31 X31 X31
1111111_01000_00111_011_1100_1_1100011  //B.LE X7 X8 || X7 < X8

00_11111_11111_00000_101_00000_1101111  //FINALHASH X0 X0 || Top 128 Bits
01_11111_11111_00001_101_00001_1101111  //FINALHASH X1 X1 || Bottom 128 Bits
